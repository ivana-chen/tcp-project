
import java.net.*;
import java.io.*;
public class myServer
{
    //initialize socket and input stream

    private Socket           socket   = null;
    private ServerSocket     serverSocket   = null;
    private DataInputStream dataIn = null;
    private DataOutputStream dataOut = null;



    // constructor with port
    public myServer(int port)
    {
        try
        {
            // starts server and waits for a connection
            serverSocket = new ServerSocket(port);
            System.out.println("Server started and waiting for client on port " + port);

            socket = serverSocket.accept(); // passive mode, listens/waits till client connects to the server
            System.out.println("Client Connection Success!"); // ACK for connection

            //Used to get data from the socket
            dataIn = new DataInputStream(
                    new BufferedInputStream(socket.getInputStream()));

            //Used to write data to the socket, i.e. ACKs
            dataOut = new DataOutputStream(socket.getOutputStream());


            // reads message from client until "Over" is sent
            String line = "";
            while (!line.equals("Over"))
            {
                try
                {
                    line = dataIn.readUTF();
                    System.out.println("Line: " + line);
                    //Now convert this UTF into a regular String since we want it in integers for the ACK
                    byte[] charset = line.getBytes("UTF-8");
                    String result = new String(charset, "UTF-8");

                    //Print it out for testing
                    System.out.println(result);
                    int sendNum = Integer.parseInt(result);
                    dataOut.write(sendNum); // Not sure if this works yet. client has to accept input from the socket

                }
                catch(IOException i)
                {
                    System.out.println(i);
                }
            }
            

        }
        catch(IOException e)
        {
            e.printStackTrace();
        }
        finally{
            try{
                // close connection
                System.out.println("Closing connection");
                socket.close();
                serverSocket.close();
                dataIn.close();
                dataOut.close();
            } catch(IOException e) {
                e.printStackTrace();;
            }
        }
    }

    public static void main(String args[])
    {
        //Server listens for client requests coming in for port
        myServer server = new myServer(158);
    }
}      
